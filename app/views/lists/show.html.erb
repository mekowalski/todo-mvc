<section class="todoapp">
  <header class="header">
    <h1><%= @list.name %></h1>
    <%= form_for([@list, @item]) do |f| %>
      <%= f.text_field :description, class: "new-todo", placeholder: (@item.errors.full_messages_for(:description ).first || "Enter a new item") %>

      <%= f.submit style: "display: none" %>
    <% end %>
  </header>

  <section class="main">
    <input class="toggle-all" type="checkbox">
    <label for="toggle-all">Mark all as complete</label>
    <ul class="todo-list">
      <%= render collection: @list.items, partial: 'items/item_li', as: :item %>
    </ul>
  </section>

  <footer class="footer">
  </footer>
</section>

<!-- embed a template -->
<script id='item-template' type="text/x-handlebars-template">
  <div class='entry'>
    <h1>{{name}}</h1>
    <div class='body'>
      {{body}}
    </div>
  </div>
</script>

<script id="entry-template" type="text/x-handlebars-template">
  <div class="entry">
    <h1>{{title}}</h1>
    <div class="body">
      {{body}}
    </div>
  </div>
</script>

<!-- L4: Convention in Rails, when generating the form on lists/show, the id=new_item by default
     whatever the class type of the object is, is what Rails uses for the form -->

<!--
var source = $('#entry-template').html()
undefined
source => returns source code into JS variable that is a string
"
 <div class="entry">
   <h1>{{title}}</h1>
   <div class="body">
     {{body}}
   </div>
 </div>
" -->

<!--
var template = Handlebars.compile(source)
undefined
template => convert string into a template
Æ’ e(a,b){return f||(f=d()),f.call(this,a,b)} -->

<!--
entry1 = {title: 'Entry1', body: 'Body for Entry 1'}
{title: "Entry1", body: "Body for Entry 1"}
entry2 = {title: 'Entry2', body: 'Body for Entry 2'}
{title: "Entry2", body: "Body for Entry 2"}

template(entry2) => read property of entry2 and injected it into the string
"
  <div class="entry">
    <h1>Entry2</h1>
    <div class="body">
      Body for Entry 2
    </div>
  </div>
" -->
